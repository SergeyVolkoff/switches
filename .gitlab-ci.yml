# Файл main.yml
# Имя workflow
name: Main Switches Workflow
on:
  push:
    branches:
      - main

jobs:
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest

    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python
      with:
        python-version: 3.9
    # Обновляем pip, устанавливаем flake8 и flake8-isort, 
    # устанавливаем зависимости проекта
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
    # Запускаем flake8
    - name: Test with flake8
      # Вызываем flake8 и указываем ему,
      # что нужно проверить файлы только в папке backend/
      run: python -m flake8 backend/ 

  build_backend_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    # needs: tests  # Не выполнять сразу, ждать, пока выполнится tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password DOCKER
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: karryserg/sw_backend:latest

  build_gateway_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: karryserg/sw_gateway:latest

  send_message:
    runs-on: ubuntu-latest
    needs: 
      - build_gateway_and_push_to_docker_hub
      - build_backend_and_push_to_docker_hub
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: build backend, gateway and push to docker_hub успешно выполнен!

    # Начиная отсюда workflow работать не будет - 
    # сервер размещения находится в серой сети, а  Аction - во внешке

#   deploy:
#     runs-on: ubuntu-latest
#     needs: 
#       # Дождёмся билда всех образов Taski
#       - build_backend_and_push_to_docker_hub
#     steps:
#     - name: Checkout repo
#       uses: actions/checkout@v3
#      # Копируем docker-compose.production.yml на продакшен-сервер
#     - name: Copy docker-compose.yml via ssh
#       uses: appleboy/scp-action@master

    # Передаём параметры для action appleboy/scp-action:
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USER }}
    #     key: ${{ secrets.SSH_KEY }}
    #     passphrase: ${{ secrets.SSH_PASSPHRASE }}
    #     source: "docker-compose.production.yml"
    #     target: "project_button"
    # - name: Executing remote ssh commands to deploy
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USER }}
    #     key: ${{ secrets.SSH_KEY }}
    #     passphrase: ${{ secrets.SSH_PASSPHRASE }}
    #     # Параметр script передаёт в action appleboy/ssh-action команды,
    #     # которые нужно выполнить на сервере, 
    #     # с которым установлено соединение
    #     script: |
    #       cd project_button
    #       # Выполняет pull образов с Docker Hub
    #       sudo docker compose -f docker-compose.production.yml pull
    #       # Перезапускает все контейнеры в Docker Compose
    #       sudo docker compose -f docker-compose.production.yml down
    #       sudo docker compose -f docker-compose.production.yml up -d